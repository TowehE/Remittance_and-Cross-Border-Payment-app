import express from 'express';
import { Request, Response } from 'express';
import Stripe from 'stripe';
import crypto from 'crypto';
import { PrismaClient } from '@prisma/client';
import { PAYSTACK_WEBHOOK_SECRET, PAYSTACK_SECRET_KEY, STRIPE_SECRET_KEY, STRIPE_WEBHOOK_SECRET } from '../shared/config';
import { process_successful_payment } from '../payment-service/payment.service';

declare global {
  namespace Express {
    interface Request {
      rawBody?: any;
      user?: {
        user_id: string;
        email?: string;
      };
    }
  }
}
export interface RequestWithRawBody extends ExpressRequest {
  rawBody?: any;
}


export interface RequestWithRawBody extends Request {
  rawBody?: Buffer | string;
}

const prisma = new PrismaClient();
const stripe = new Stripe(STRIPE_SECRET_KEY);

// Handles Stripe webhook events on webhook endpoint
export const handle_stripe_webhook_event = async (req: RequestWithRawBody, res: Response) => {
  let event: Stripe.Event;
  
  const signature = req.headers['stripe-signature'] as string;
  const rawBody = req.rawBody;

  console.log("Stripe signature:", signature ? "Present" : "Missing");
  console.log("Stripe webhook secret:", STRIPE_WEBHOOK_SECRET ? "Present" : "Missing");
  console.log("Stripe raw body is buffer:", Buffer.isBuffer(rawBody));
  console.log("Is rawBody a buffer:", Buffer.isBuffer(rawBody));

  // Check for missing components
  if (!signature) {
    console.error('Missing Stripe signature header');
    return res.status(400).json({ error: 'Missing Stripe signature or webhook secret.' });
  }

  if (!rawBody) {
    console.error('Missing raw body');
    return res.status(400).json({ error: 'Missing Stripe signature or webhook secret.' });
  }

  if (!STRIPE_WEBHOOK_SECRET) {
    console.error('Missing webhook secret in environment variables');
    return res.status(400).json({ error: 'Missing Stripe signature or webhook secret.' });
  }

  // Verify the webhook signature
  try {
    event = stripe.webhooks.constructEvent(
      rawBody,
      signature,
      STRIPE_WEBHOOK_SECRET
    );
    
    console.log("Webhook event received:", event.type);
  } catch (err) {
    console.error('Stripe signature verification failed:', err);
    return res.status(400).json({ error: 'Invalid Stripe signature' });
  }

  // Process the webhook event
  try {
    switch (event.type) {
      case 'checkout.session.completed': {
        const session = event.data.object as Stripe.Checkout.Session;
        const transactionId = session.metadata?.transactionId;
        if (transactionId) {
          await process_successful_payment({ id: transactionId });
          console.log(`Processed successful payment for transaction: ${transactionId}`);
        }
        break;
      }

      case 'payment_intent.succeeded': {
        const intent = event.data.object as Stripe.PaymentIntent;
        const transactionId = intent.metadata?.transactionId;
        if (transactionId) {
          await process_successful_payment({ id: transactionId });
          console.log(`Processed successful payment intent for transaction: ${transactionId}`);
        }
        break;
      }

      case 'payment_intent.payment_failed': {
        const intent = event.data.object as Stripe.PaymentIntent;
        const transactionId = intent.metadata?.transactionId;
        if (transactionId) {
          await prisma.transaction.updateMany({
            where: { id: transactionId },
            data: { status: 'FAILED' },
          });
          console.log(`Marked transaction as failed: ${transactionId}`);
        }
        break;
      }

      default:
        console.log('Unhandled event type:', event.type);
    }
  } catch (error) {
    console.error('Error handling Stripe event:', error);
    return res.status(500).json({ error: 'Webhook handler error' });
  }

  return res.status(200).json({ received: true });
};