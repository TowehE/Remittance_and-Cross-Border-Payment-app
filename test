import { PrismaClient, TransactionStatus } from "@prisma/client";
import { transaction_queue } from "../rate/redis.service";

const prisma = new PrismaClient();
const TEN_MINUTES = 10 * 60 * 1000;

function getTenMinutesAgo(): Date {
  return new Date(Date.now() - TEN_MINUTES);
}

async function schedulePendingTransactions() {
  try {
    const now = new Date();
    const tenMinutesAgo = getTenMinutesAgo();

    const pendingTransactions = await prisma.transaction.findMany({
      where: {
        status: TransactionStatus.PENDING,
        createdAt: { lt: now, gte: tenMinutesAgo },
      },
      take: 10,
    });

    console.log(`[Pending] Found ${pendingTransactions.length} transactions to process.`);

    for (const tx of pendingTransactions) {
      const job = await transaction_queue.add(
        "process-transaction",
        { transactionId: tx.id },
        {
          attempts: 5,
          backoff: { type: "exponential", delay: 2000 },
          removeOnComplete: true,
          removeOnFail: false,
        }
      );

      console.log(`[Pending] Added job ${job.id} for transaction ${tx.id}`);
    }

    console.log("[Pending] Job scheduling complete.");
  } catch (error) {
    console.error("[Pending] Error scheduling transactions:", error);
  }
}

async function scheduleAutoCancelTransactions() {
  try {
    const threshold = getTenMinutesAgo();

    const staleTransactions = await prisma.transaction.findMany({
      where: {
        status: TransactionStatus.PENDING,
        createdAt: { lt: threshold },
      },
      take: 5,
    });

    console.log(`[Auto-Cancel] Found ${staleTransactions.length} stale transactions.`);

    for (const tx of staleTransactions) {
      await transaction_queue.add(
        "auto-cancel",
        { transactionId: tx.id },
        {
          attempts: 3,
          removeOnComplete: true,
          removeOnFail: false,
        }
      );

      console.log(`[Auto-Cancel] Scheduled auto-cancel for transaction ${tx.id}`);
    }

    console.log("[Auto-Cancel] Job scheduling complete.");
  } catch (error) {
    console.error("[Auto-Cancel] Error scheduling stale transactions:", error);
  }
}

export function startScheduledJobs() {
  schedulePendingTransactions();
  scheduleAutoCancelTransactions();

  setInterval(schedulePendingTransactions, 5 * 60 * 1000);
  setInterval(scheduleAutoCancelTransactions, 5 * 60 * 1000);
}
